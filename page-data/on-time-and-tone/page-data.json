{"componentChunkName":"component---src-templates-blog-post-js","path":"/on-time-and-tone/","result":{"data":{"site":{"siteMetadata":{"title":"Aditya Srinivasan"}},"mdx":{"id":"468a8384-91cd-5af6-a877-5b2c7d4969d1","excerpt":"In the taxonomy of my personal Spotify playlists, there are two phyla:\n temporal  and  tonal . Temporal  playlists grow organically and without premeditationâ€¦","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"On Time and Tone\",\n  \"published_on\": \"2020-12-31\",\n  \"updated_on\": \"2020-01-01\",\n  \"description\": \"Or: how I taught my playlists to update themselves.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"In the taxonomy of my personal Spotify playlists, there are two phyla:\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"temporal\"), \" and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"tonal\"), \".\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Temporal\"), \" playlists grow organically and without premeditation. Their purpose\\nis to capture the zeitgeist particular period, typically delimited by the\\nbeginning and end of the temperate seasons, thereby allowing me to relive the\\nemotions of the time through its soundscape. When I find myself repeatedly\\nlistening to a song, I eventually add it to the playlist for the current period.\\nIn this way, these playlists grow quickly, all at once, and then not at all.\\nOnce a new season arrives, a new playlist is minted, and the old one becomes\\nparalyzed, an audio time capsule frozen in time forevermore.\"), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Tonal\"), \" playlists are more similar to the conventional playlist in nature, in\\nthat their constituent songs all share some common trait. For example, the songs\\nin my running playlist all possess a fast, consistent tempo, whereas those in my\\nstudy playlist possess a soothing instrumentality devoid of lyrical distraction.\\nThese playlists are harder to develop, and songs must be sought out with\\nintentionality and purpose in order to curate the collection.\"), mdx(\"p\", null, \"Within the phylum of tonal playlists are two sub-classes. In order to name\\nthese, I'll borrow two terms from investing: \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://www.investopedia.com/news/active-vs-passive-investing/\"\n  }), mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"passive\"), \" and \", mdx(\"strong\", {\n    parentName: \"a\"\n  }, \"active\"), \"\\nmanagement\"), \".\"), mdx(\"p\", null, \"Most of my tonal playlists begin as actively managed ones, as I spend the time\\nand effort to sift through the dozens of candidate songs to which a few are\\ngranted admission. However, with time inevitably comes neglect, and the playlist\\neventually becomes passively managed, a fate similar to that of the temporal\\nplaylist.\"), mdx(\"p\", null, \"Except, while this fate is definitional for the temporal playlist, it is\\nundesirable for the tonal one. An unchanging running playlist will fail to\\nmotivate me with the new and energizing beats I seek. A constant study playlist\\nwill eventually distract me with familiar and predictable melodies that disrupt\\nmy flow.\"), mdx(\"p\", null, \"I found myself wanting a way to automate the active management of my tonal\\nplaylists: a process that would evolve their content dynamically, while holding\\ntheir essence constant.\"), mdx(\"p\", null, \"Enter THESEUS.\"), mdx(\"hr\", null), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://adisrini.com/theseus\"\n  }), \"THESEUS\"), \" is an application I built that achieves\\nthe automatic active management I outlined above. The name pays homage to \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://en.wikipedia.org/wiki/Ship_of_Theseus\"\n  }), \"the\\nmetaphysical question\"), \" originally\\nposed by Ancient Greek philosophers. In the context of playlists, specifically\\ntonal ones, I\\u2019d venture to say that the playlist remains the same despite its\\nconstituent songs being substituted over time. The soul of the playlist is its\\nability to invoke particular feelings, which is greater than the mere sum of its\\nparts.\"), mdx(\"p\", null, \"Once you register a playlist with THESEUS, it will slowly add songs to the\\nplaylist based on Spotify's Recommendations API. Eventually, it will remove old\\nones. In this way, the playlist will completely change over the course of time,\\nwhile maintaining its essence. I\\u2019d encourage you to read the \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"How To\"), \" guide on\\nthe application page itself, since any documentation here is bound to grow\\nstale.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Building THESEUS gave me the opportunity to use a variety of technologies, some\\nfamiliar, others novel.\"), mdx(\"p\", null, \"The frontend web client was written using TypeScript, React, and Redux.\\nNaturally, I used the Spotify API to retrieve and update user data.\"), mdx(\"p\", null, \"The backend was written using features from Google Firebase. In particular, I\\nused Firestore to persist the set of playlists a user registers to be managed by\\nTHESEUS. I also used the pubsub feature of Functions to periodically run the job\\nto update all user playlists.\"), mdx(\"hr\", null), mdx(\"p\", null, \"So, I hope you give THESEUS a try \\u2013 it's quite simple to get started. If you do,\\nlet me know what you think!\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"title":"On Time and Tone","published_on":"December 31, 2020","updated_on":"January, 01, 2020","description":"Or: how I taught my playlists to update themselves."},"fields":{"readingTime":{"text":"4 min read"}}},"previous":null,"next":null},"pageContext":{"id":"468a8384-91cd-5af6-a877-5b2c7d4969d1","previousPostId":null,"nextPostId":null}},"staticQueryHashes":["234287855","2433109408","4239340312"]}